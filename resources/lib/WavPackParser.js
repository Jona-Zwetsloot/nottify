import*as e from"./token-types.js";import{StringType as t}from"./token-types.js";import a from"./debug.js";import*as s from"./strtok3.js";import{uint8ArrayToString as i,stringToUint8Array as r,uint8ArrayToHex as n}from"./uint8array-extras.js";const o=e=>class extends Error{constructor(t){super(t),this.name=e}};class l extends(o("UnexpectedFileContentError")){constructor(e,t){super(t),this.fileType=e}toString(){return`${this.name} (FileType: ${this.fileType}): ${this.message}`}}class c extends(o("FieldDecodingError")){}class d extends(o("InternalParserError")){}const f=e=>class extends l{constructor(t){super(e,t)}};function h(e,t,a,s){let i=t;if("utf-16le"===s){for(;0!==e[i]||0!==e[i+1];){if(i>=a)return a;i+=2}return i}for(;0!==e[i];){if(i>=a)return a;i++}return i}class m{constructor(e,t,a){this.metadata=e,this.tokenizer=t,this.options=a}}const p=/^[\x21-\x7eÂ©][\x20-\x7e\x00()]{3}/,g={len:4,get:(e,t)=>{const a=i(e.slice(t,t+g.len),"latin1");if(!a.match(p))throw new c(`FourCC contains invalid characters: ${function(e){const t=[];for(let a=0,s=e.length;a<s;a++){const s=Number(e.charCodeAt(a)).toString(16);t.push(1===s.length?`0${s}`:s)}return t.join(" ")}(a)} "${a}"`);return a},put:(e,t,a)=>{const s=r(a);if(4!==s.length)throw new d("Invalid length");return e.set(s,t),t+4}};var k;!function(e){e[e.text_utf8=0]="text_utf8",e[e.binary=1]="binary",e[e.external_info=2]="external_info",e[e.reserved=3]="reserved"}(k||(k={}));const u={len:52,get:(t,a)=>({ID:g.get(t,a),version:e.UINT32_LE.get(t,a+4)/1e3,descriptorBytes:e.UINT32_LE.get(t,a+8),headerBytes:e.UINT32_LE.get(t,a+12),seekTableBytes:e.UINT32_LE.get(t,a+16),headerDataBytes:e.UINT32_LE.get(t,a+20),apeFrameDataBytes:e.UINT32_LE.get(t,a+24),apeFrameDataBytesHigh:e.UINT32_LE.get(t,a+28),terminatingDataBytes:e.UINT32_LE.get(t,a+32),fileMD5:new e.Uint8ArrayType(16).get(t,a+36)})},I={len:24,get:(t,a)=>({compressionLevel:e.UINT16_LE.get(t,a),formatFlags:e.UINT16_LE.get(t,a+2),blocksPerFrame:e.UINT32_LE.get(t,a+4),finalFrameBlocks:e.UINT32_LE.get(t,a+8),totalFrames:e.UINT32_LE.get(t,a+12),bitsPerSample:e.UINT16_LE.get(t,a+16),channel:e.UINT16_LE.get(t,a+18),sampleRate:e.UINT32_LE.get(t,a+20)})},z={len:32,get:(t,a)=>({ID:new e.StringType(8,"ascii").get(t,a),version:e.UINT32_LE.get(t,a+8),size:e.UINT32_LE.get(t,a+12),fields:e.UINT32_LE.get(t,a+16),flags:w(e.UINT32_LE.get(t,a+20))})},T={len:8,get:(t,a)=>({size:e.UINT32_LE.get(t,a),flags:w(e.UINT32_LE.get(t,a+4))})};function w(e){return{containsHeader:y(e,31),containsFooter:y(e,30),isHeader:y(e,29),readOnly:y(e,0),dataType:(6&e)>>1}}function y(e,t){return!!(e&1<<t)}const E=a("music-metadata:parser:APEv2"),b="APEv2",D="APETAGEX";class S extends(f("APEv2")){}class U extends m{constructor(){super(...arguments),this.ape={}}static tryParseApeHeader(e,t,a){return new U(e,t,a).tryParseApeHeader()}static calculateDuration(e){let t=e.totalFrames>1?e.blocksPerFrame*(e.totalFrames-1):0;return t+=e.finalFrameBlocks,t/e.sampleRate}static async findApeFooterOffset(e,t){const a=new Uint8Array(z.len),s=e.position;await e.readBuffer(a,{position:t-z.len}),e.setPosition(s);const i=z.get(a,0);if("APETAGEX"===i.ID)return i.flags.isHeader?E("APE Header found at offset="+(t-z.len)):(E("APE Footer found at offset="+(t-z.len)),t-=i.size),{footer:i,offset:t}}static parseTagFooter(e,t,a){const i=z.get(t,t.length-z.len);if(i.ID!==D)throw new S("Unexpected APEv2 Footer ID preamble value");s.fromBuffer(t);return new U(e,s.fromBuffer(t),a).parseTags(i)}async tryParseApeHeader(){if(this.tokenizer.fileInfo.size&&this.tokenizer.fileInfo.size-this.tokenizer.position<z.len)return void E("No APEv2 header found, end-of-file reached");const e=await this.tokenizer.peekToken(z);if(e.ID===D)return await this.tokenizer.ignore(z.len),this.parseTags(e);if(E(`APEv2 header not found at offset=${this.tokenizer.position}`),this.tokenizer.fileInfo.size){const e=this.tokenizer.fileInfo.size-this.tokenizer.position,t=new Uint8Array(e);return await this.tokenizer.readBuffer(t),U.parseTagFooter(this.metadata,t,this.options)}}async parse(){const e=await this.tokenizer.readToken(u);if("MAC "!==e.ID)throw new S("Unexpected descriptor ID");this.ape.descriptor=e;const t=e.descriptorBytes-u.len,a=await(t>0?this.parseDescriptorExpansion(t):this.parseHeader());return await this.tokenizer.ignore(a.forwardBytes),this.tryParseApeHeader()}async parseTags(e){const a=new Uint8Array(256);let s=e.size-z.len;E(`Parse APE tags at offset=${this.tokenizer.position}, size=${s}`);for(let r=0;r<e.fields;r++){if(s<T.len){this.metadata.addWarning(`APEv2 Tag-header: ${e.fields-r} items remaining, but no more tag data to read.`);break}const n=await this.tokenizer.readToken(T);s-=T.len+n.size,await this.tokenizer.peekBuffer(a,{length:Math.min(a.length,s)});let o=h(a,0,a.length);const l=await this.tokenizer.readToken(new t(o,"ascii"));switch(await this.tokenizer.ignore(1),s-=l.length+1,n.flags.dataType){case k.text_utf8:{const e=(await this.tokenizer.readToken(new t(n.size,"utf8"))).split(/\x00/g);await Promise.all(e.map((e=>this.metadata.addTag(b,l,e))));break}case k.binary:if(this.options.skipCovers)await this.tokenizer.ignore(n.size);else{const e=new Uint8Array(n.size);await this.tokenizer.readBuffer(e),o=h(e,0,e.length);const t=i(e.slice(0,o)),a=e.slice(o+1);await this.metadata.addTag(b,l,{description:t,data:a})}break;case k.external_info:E(`Ignore external info ${l}`),await this.tokenizer.ignore(n.size);break;case k.reserved:E(`Ignore external info ${l}`),this.metadata.addWarning(`APEv2 header declares a reserved datatype for "${l}"`),await this.tokenizer.ignore(n.size)}}}async parseDescriptorExpansion(e){return await this.tokenizer.ignore(e),this.parseHeader()}async parseHeader(){const e=await this.tokenizer.readToken(I);if(this.metadata.setFormat("lossless",!0),this.metadata.setFormat("container","Monkey's Audio"),this.metadata.setFormat("bitsPerSample",e.bitsPerSample),this.metadata.setFormat("sampleRate",e.sampleRate),this.metadata.setFormat("numberOfChannels",e.channel),this.metadata.setFormat("duration",U.calculateDuration(e)),!this.ape.descriptor)throw new S("Missing APE descriptor");return{forwardBytes:this.ape.descriptor.seekTableBytes+this.ape.descriptor.headerDataBytes+this.ape.descriptor.apeFrameDataBytes+this.ape.descriptor.terminatingDataBytes}}}const _=[6e3,8e3,9600,11025,12e3,16e3,22050,24e3,32e3,44100,48e3,64e3,88200,96e3,192e3,-1],P={len:32,get:(t,a)=>{const s=e.UINT32_LE.get(t,a+24),i={BlockID:g.get(t,a),blockSize:e.UINT32_LE.get(t,a+4),version:e.UINT16_LE.get(t,a+8),totalSamples:e.UINT32_LE.get(t,a+12),blockIndex:e.UINT32_LE.get(t,a+16),blockSamples:e.UINT32_LE.get(t,a+20),flags:{bitsPerSample:8*(1+B(s,0,2)),isMono:F(s,2),isHybrid:F(s,3),isJointStereo:F(s,4),crossChannel:F(s,5),hybridNoiseShaping:F(s,6),floatingPoint:F(s,7),samplingRate:_[B(s,23,4)],isDSD:F(s,31)},crc:new e.Uint8ArrayType(4).get(t,a+28)};return i.flags.isDSD&&(i.totalSamples*=8),i}},x={len:1,get:(e,t)=>({functionId:B(e[t],0,6),isOptional:F(e[t],5),isOddSize:F(e[t],6),largeBlock:F(e[t],7)})};function F(e,t){return 1===B(e,t,1)}function B(e,t,a){return e>>>t&4294967295>>>32-a}const N=a("music-metadata:parser:WavPack");class L extends(f("WavPack")){}class A extends m{constructor(){super(...arguments),this.audioDataSize=0}async parse(){return this.audioDataSize=0,await this.parseWavPackBlocks(),U.tryParseApeHeader(this.metadata,this.tokenizer,this.options)}async parseWavPackBlocks(){do{if("wvpk"!==await this.tokenizer.peekToken(g))break;const e=await this.tokenizer.readToken(P);if("wvpk"!==e.BlockID)throw new L("Invalid WavPack Block-ID");N(`WavPack header blockIndex=${e.blockIndex}, len=${P.len}`),0!==e.blockIndex||this.metadata.format.container||(this.metadata.setFormat("container","WavPack"),this.metadata.setFormat("lossless",!e.flags.isHybrid),this.metadata.setFormat("bitsPerSample",e.flags.bitsPerSample),e.flags.isDSD||(this.metadata.setFormat("sampleRate",e.flags.samplingRate),this.metadata.setFormat("duration",e.totalSamples/e.flags.samplingRate)),this.metadata.setFormat("numberOfChannels",e.flags.isMono?1:2),this.metadata.setFormat("numberOfSamples",e.totalSamples),this.metadata.setFormat("codec",e.flags.isDSD?"DSD":"PCM"));const t=e.blockSize-(P.len-8);await(0===e.blockIndex?this.parseMetadataSubBlock(e,t):this.tokenizer.ignore(t)),e.blockSamples>0&&(this.audioDataSize+=e.blockSize)}while(!this.tokenizer.fileInfo.size||this.tokenizer.fileInfo.size-this.tokenizer.position>=P.len);this.metadata.format.duration&&this.metadata.setFormat("bitrate",8*this.audioDataSize/this.metadata.format.duration)}async parseMetadataSubBlock(t,a){let s=a;for(;s>x.len;){const a=await this.tokenizer.readToken(x),i=await this.tokenizer.readNumber(a.largeBlock?e.UINT24_LE:e.UINT8),r=new Uint8Array(2*i-(a.isOddSize?1:0));switch(await this.tokenizer.readBuffer(r),N(`Metadata Sub-Blocks functionId=0x${a.functionId.toString(16)}, id.largeBlock=${a.largeBlock},data-size=${r.length}`),a.functionId){case 0:break;case 14:{N("ID_DSD_BLOCK");const a=1<<e.UINT8.get(r,0),s=t.flags.samplingRate*a*8;if(!t.flags.isDSD)throw new L("Only expect DSD block if DSD-flag is set");this.metadata.setFormat("sampleRate",s),this.metadata.setFormat("duration",t.totalSamples/s);break}case 36:N("ID_ALT_TRAILER: trailer for non-wav files");break;case 38:this.metadata.setFormat("audioMD5",r);break;case 47:N(`ID_BLOCK_CHECKSUM: checksum=${n(r)}`);break;default:N(`Ignore unsupported meta-sub-block-id functionId=0x${a.functionId.toString(16)}`)}s-=x.len+(a.largeBlock?e.UINT24_LE.len:e.UINT8.len)+2*i,N(`remainingLength=${s}`),a.isOddSize&&this.tokenizer.ignore(1)}if(0!==s)throw new L("metadata-sub-block should fit it remaining length")}}export{L as WavPackContentError,A as WavPackParser};export default null;