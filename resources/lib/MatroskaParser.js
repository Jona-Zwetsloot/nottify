import e from"./debug.js";import*as a from"./token-types.js";import{UINT8 as n,Float64_BE as t,Float32_BE as i,StringType as r}from"./token-types.js";import{EndOfStreamError as o}from"./strtok3.js";class s{constructor(e,a,n){this.metadata=e,this.tokenizer=a,this.options=n}}var l;!function(e){e[e.string=0]="string",e[e.uint=1]="uint",e[e.uid=2]="uid",e[e.bool=3]="bool",e[e.binary=4]="binary",e[e.float=5]="float"}(l||(l={}));const u={name:"dtd",container:{440786851:{name:"ebml",container:{17030:{name:"ebmlVersion",value:l.uint},17143:{name:"ebmlReadVersion",value:l.uint},17138:{name:"ebmlMaxIDWidth",value:l.uint},17139:{name:"ebmlMaxSizeWidth",value:l.uint},17026:{name:"docType",value:l.string},17031:{name:"docTypeVersion",value:l.uint},17029:{name:"docTypeReadVersion",value:l.uint}}},408125543:{name:"segment",container:{290298740:{name:"seekHead",container:{19899:{name:"seek",multiple:!0,container:{21419:{name:"id",value:l.binary},21420:{name:"position",value:l.uint}}}}},357149030:{name:"info",container:{29604:{name:"uid",value:l.uid},29572:{name:"filename",value:l.string},3979555:{name:"prevUID",value:l.uid},3965867:{name:"prevFilename",value:l.string},4110627:{name:"nextUID",value:l.uid},4096955:{name:"nextFilename",value:l.string},2807729:{name:"timecodeScale",value:l.uint},17545:{name:"duration",value:l.float},17505:{name:"dateUTC",value:l.uint},31657:{name:"title",value:l.string},19840:{name:"muxingApp",value:l.string},22337:{name:"writingApp",value:l.string}}},524531317:{name:"cluster",multiple:!0,container:{231:{name:"timecode",value:l.uid},22743:{name:"silentTracks ",multiple:!0},167:{name:"position",value:l.uid},171:{name:"prevSize",value:l.uid},160:{name:"blockGroup"},163:{name:"simpleBlock"}}},374648427:{name:"tracks",container:{174:{name:"entries",multiple:!0,container:{215:{name:"trackNumber",value:l.uint},29637:{name:"uid",value:l.uid},131:{name:"trackType",value:l.uint},185:{name:"flagEnabled",value:l.bool},136:{name:"flagDefault",value:l.bool},21930:{name:"flagForced",value:l.bool},156:{name:"flagLacing",value:l.bool},28135:{name:"minCache",value:l.uint},28136:{name:"maxCache",value:l.uint},2352003:{name:"defaultDuration",value:l.uint},2306383:{name:"timecodeScale",value:l.float},21358:{name:"name",value:l.string},2274716:{name:"language",value:l.string},134:{name:"codecID",value:l.string},25506:{name:"codecPrivate",value:l.binary},2459272:{name:"codecName",value:l.string},3839639:{name:"codecSettings",value:l.string},3883072:{name:"codecInfoUrl",value:l.string},2536e3:{name:"codecDownloadUrl",value:l.string},170:{name:"codecDecodeAll",value:l.bool},28587:{name:"trackOverlay",value:l.uint},224:{name:"video",container:{154:{name:"flagInterlaced",value:l.bool},21432:{name:"stereoMode",value:l.uint},176:{name:"pixelWidth",value:l.uint},186:{name:"pixelHeight",value:l.uint},21680:{name:"displayWidth",value:l.uint},21690:{name:"displayHeight",value:l.uint},21683:{name:"aspectRatioType",value:l.uint},3061028:{name:"colourSpace",value:l.uint},3126563:{name:"gammaValue",value:l.float}}},225:{name:"audio",container:{181:{name:"samplingFrequency",value:l.float},30901:{name:"outputSamplingFrequency",value:l.float},159:{name:"channels",value:l.uint},148:{name:"channels",value:l.uint},32123:{name:"channelPositions",value:l.binary},25188:{name:"bitDepth",value:l.uint}}},28032:{name:"contentEncodings",container:{25152:{name:"contentEncoding",container:{20529:{name:"order",value:l.uint},20530:{name:"scope",value:l.bool},20531:{name:"type",value:l.uint},20532:{name:"contentEncoding",container:{16980:{name:"contentCompAlgo",value:l.uint},16981:{name:"contentCompSettings",value:l.binary}}},20533:{name:"contentEncoding",container:{18401:{name:"contentEncAlgo",value:l.uint},18402:{name:"contentEncKeyID",value:l.binary},18403:{name:"contentSignature ",value:l.binary},18404:{name:"ContentSigKeyID  ",value:l.binary},18405:{name:"contentSigAlgo ",value:l.uint},18406:{name:"contentSigHashAlgo ",value:l.uint}}},25188:{name:"bitDepth",value:l.uint}}}}}}}}},475249515:{name:"cues",container:{187:{name:"cuePoint",container:{179:{name:"cueTime",value:l.uid},183:{name:"positions",container:{247:{name:"track",value:l.uint},241:{name:"clusterPosition",value:l.uint},21368:{name:"blockNumber",value:l.uint},234:{name:"codecState",value:l.uint},219:{name:"reference",container:{150:{name:"time",value:l.uint},151:{name:"cluster",value:l.uint},21343:{name:"number",value:l.uint},235:{name:"codecState",value:l.uint}}},240:{name:"relativePosition",value:l.uint}}}}}}},423732329:{name:"attachments",container:{24999:{name:"attachedFiles",multiple:!0,container:{18046:{name:"description",value:l.string},18030:{name:"name",value:l.string},18016:{name:"mimeType",value:l.string},18012:{name:"data",value:l.binary},18094:{name:"uid",value:l.uid}}}}},272869232:{name:"chapters",container:{17849:{name:"editionEntry",container:{182:{name:"chapterAtom",container:{29636:{name:"uid",value:l.uid},145:{name:"timeStart",value:l.uint},146:{name:"timeEnd",value:l.uid},152:{name:"hidden",value:l.bool},17816:{name:"enabled",value:l.uid},143:{name:"track",container:{137:{name:"trackNumber",value:l.uid},128:{name:"display",container:{133:{name:"string",value:l.string},17276:{name:"language ",value:l.string},17278:{name:"country ",value:l.string}}}}}}}}}}},307544935:{name:"tags",container:{29555:{name:"tag",multiple:!0,container:{25536:{name:"target",container:{25541:{name:"tagTrackUID",value:l.uid},25540:{name:"tagChapterUID",value:l.uint},25542:{name:"tagAttachmentUID",value:l.uid},25546:{name:"targetType",value:l.string},26826:{name:"targetTypeValue",value:l.uint},25545:{name:"tagEditionUID",value:l.uid}}},26568:{name:"simpleTags",multiple:!0,container:{17827:{name:"name",value:l.string},17543:{name:"string",value:l.string},17541:{name:"binary",value:l.binary},17530:{name:"language",value:l.string},17531:{name:"languageIETF",value:l.string},17540:{name:"default",value:l.bool}}}}}}}}}}};var m,c;!function(e){e[e.shot=10]="shot",e[e.scene=20]="scene",e[e.track=30]="track",e[e.part=40]="part",e[e.album=50]="album",e[e.edition=60]="edition",e[e.collection=70]="collection"}(m||(m={})),function(e){e[e.video=1]="video",e[e.audio=2]="audio",e[e.complex=3]="complex",e[e.logo=4]="logo",e[e.subtitle=17]="subtitle",e[e.button=18]="button",e[e.control=32]="control"}(c||(c={}));const d=e=>class extends Error{constructor(a){super(a),this.name=e}};class g extends(d("UnexpectedFileContentError")){constructor(e,a){super(a),this.fileType=e}toString(){return`${this.name} (FileType: ${this.fileType}): ${this.message}`}}const p=e=>class extends g{constructor(a){super(e,a)}},v=e("music-metadata:parser:ebml");class h extends(p("EBML")){}var f;!function(e){e[e.ReadNext=0]="ReadNext",e[e.IgnoreElement=2]="IgnoreElement",e[e.SkipSiblings=3]="SkipSiblings",e[e.TerminateParsing=4]="TerminateParsing",e[e.SkipElement=5]="SkipElement"}(f||(f={}));class b{constructor(e){this.tokenizer=e,this.padding=0,this.parserMap=new Map,this.ebmlMaxIDLength=4,this.ebmlMaxSizeLength=8,this.parserMap.set(l.uint,(e=>this.readUint(e))),this.parserMap.set(l.string,(e=>this.readString(e))),this.parserMap.set(l.binary,(e=>this.readBuffer(e))),this.parserMap.set(l.uid,(async e=>this.readBuffer(e))),this.parserMap.set(l.bool,(e=>this.readFlag(e))),this.parserMap.set(l.float,(e=>this.readFloat(e)))}async iterate(e,a,n){return this.parseContainer(y(e),a,n)}async parseContainer(e,a,n){const t={};for(;this.tokenizer.position<a;){let i;const r=this.tokenizer.position;try{i=await this.readElement()}catch(e){if(e instanceof o)break;throw e}const s=e.container[i.id];if(s){switch(n.startNext(s)){case f.ReadNext:if(i.id,v(`Read element: name=${x(s)}{id=0x${i.id.toString(16)}, container=${!!s.container}} at position=${r}`),s.container){const e=await this.parseContainer(s,i.len>=0?this.tokenizer.position+i.len:-1,n);s.multiple?(t[s.name]||(t[s.name]=[]),t[s.name].push(e)):t[s.name]=e,await n.elementValue(s,e,r)}else{const e=this.parserMap.get(s.value);if("function"==typeof e){const a=await e(i);t[s.name]=a,await n.elementValue(s,a,r)}}break;case f.SkipElement:v(`Go to next element: name=${x(s)}, element.id=0x${i.id}, container=${!!s.container} at position=${r}`);break;case f.IgnoreElement:v(`Ignore element: name=${x(s)}, element.id=0x${i.id}, container=${!!s.container} at position=${r}`),await this.tokenizer.ignore(i.len);break;case f.SkipSiblings:v(`Ignore remaining container, at: name=${x(s)}, element.id=0x${i.id}, container=${!!s.container} at position=${r}`),await this.tokenizer.ignore(a-this.tokenizer.position);break;case f.TerminateParsing:return v(`Terminate parsing at element: name=${x(s)}, element.id=0x${i.id}, container=${!!s.container} at position=${r}`),t}}else if(236===i.id)this.padding+=i.len,await this.tokenizer.ignore(i.len);else v(`parseEbml: parent=${x(e)}, unknown child: id=${i.id.toString(16)} at position=${r}`),this.padding+=i.len,await this.tokenizer.ignore(i.len)}return t}async readVintData(e){const a=await this.tokenizer.peekNumber(n);let t=128,i=1;for(;!(a&t);){if(i>e)throw new h("VINT value exceeding maximum size");++i,t>>=1}const r=new Uint8Array(i);return await this.tokenizer.readBuffer(r),r}async readElement(){const e=await this.readVintData(this.ebmlMaxIDLength),a=await this.readVintData(this.ebmlMaxSizeLength);return a[0]^=128>>a.length-1,{id:k(e,e.length),len:k(a,a.length)}}async readFloat(e){switch(e.len){case 0:return 0;case 4:return this.tokenizer.readNumber(i);case 8:case 10:return this.tokenizer.readNumber(t);default:throw new h(`Invalid IEEE-754 float length: ${e.len}`)}}async readFlag(e){return 1===await this.readUint(e)}async readUint(e){return k(await this.readBuffer(e),e.len)}async readString(e){return(await this.tokenizer.readToken(new r(e.len,"utf-8"))).replace(/\x00.*$/g,"")}async readBuffer(e){const a=new Uint8Array(e.len);return await this.tokenizer.readBuffer(a),a}}function k(e,n){return Number(function(e,n){const t=new Uint8Array(8),i=e.subarray(0,n);try{return t.set(i,8-n),a.UINT64_BE.get(t,0)}catch(e){return BigInt(-1)}}(e,n))}function y(e){return e.container&&Object.keys(e.container).map((a=>{const n=e.container[a];return n.id=Number.parseInt(a),n})).forEach((a=>{a.parent=e,y(a)})),e}function x(e){let a="";return e.parent&&"dtd"!==e.parent.name&&(a+=`${x(e.parent)}/`),a+e.name}const w=e("music-metadata:parser:matroska");class S extends s{constructor(){super(...arguments),this.seekHeadOffset=0,this.flagUseIndexToSkipClusters=this.options.mkvUseIndex??!1}async parse(){const e=this.tokenizer.fileInfo.size??Number.MAX_SAFE_INTEGER,a=new b(this.tokenizer);w("Initializing DTD end MatroskaIterator"),await a.iterate(u,e,{startNext:e=>{switch(e.id){case 475249515:return w(`Skip element: name=${e.name}, id=0x${e.id.toString(16)}`),f.IgnoreElement;case 524531317:if(this.flagUseIndexToSkipClusters&&this.seekHead){const e=this.seekHead.seek.find((e=>e.position+this.seekHeadOffset>this.tokenizer.position));if(e){const a=e.position+this.seekHeadOffset-this.tokenizer.position;return w(`Use index to go to next position, ignoring ${a} bytes`),this.tokenizer.ignore(a),f.SkipElement}}return f.IgnoreElement;default:return f.ReadNext}},elementValue:async(e,a,n)=>{switch(w(`Received: name=${e.name}, value=${a}`),e.id){case 17026:this.metadata.setFormat("container",`EBML/${a}`);break;case 290298740:this.seekHead=a,this.seekHeadOffset=n;break;case 357149030:{const e=a,n=e.timecodeScale?e.timecodeScale:1e6;if("number"==typeof e.duration){const a=e.duration*n/1e9;await this.addTag("segment:title",e.title),this.metadata.setFormat("duration",Number(a))}}break;case 374648427:{const e=a;if(e?.entries){e.entries.forEach((e=>{const a={codecName:e.codecID.replace("A_","").replace("V_",""),codecSettings:e.codecSettings,flagDefault:e.flagDefault,flagLacing:e.flagLacing,flagEnabled:e.flagEnabled,language:e.language,name:e.name,type:e.trackType,audio:e.audio,video:e.video};this.metadata.addStreamInfo(a)}));const a=e.entries.filter((e=>e.trackType===c.audio)).reduce(((e,a)=>e?a.flagDefault&&!e.flagDefault||a.trackNumber<e.trackNumber?a:e:a),null);a&&(this.metadata.setFormat("codec",a.codecID.replace("A_","")),this.metadata.setFormat("sampleRate",a.audio.samplingFrequency),this.metadata.setFormat("numberOfChannels",a.audio.channels))}}break;case 307544935:{const e=a;await Promise.all(e.tag.map((async e=>{const a=e.target,n=a?.targetTypeValue?m[a.targetTypeValue]:a?.targetType?a.targetType:"track";await Promise.all(e.simpleTags.map((async e=>{const a=e.string?e.string:e.binary;await this.addTag(`${n}:${e.name}`,a)})))})))}break;case 423732329:{const e=a;await Promise.all(e.attachedFiles.filter((e=>e.mimeType.startsWith("image/"))).map((e=>this.addTag("picture",{data:e.data,format:e.mimeType,description:e.description,name:e.name}))))}}}})}async addTag(e,a){await this.metadata.addTag("matroska",e,a)}}export{S as MatroskaParser};export default null;